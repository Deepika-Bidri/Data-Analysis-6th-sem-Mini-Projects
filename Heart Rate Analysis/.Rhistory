# Load necessary packages
library(tidyverse)
library(broom)
library(Metrics)
# --- Step 1: Load the uploaded dataset ---
# Replace with your actual path if needed
hd_data <- read.csv("C:/Users/Nelson/Downloads/Cleveland_hd (2).csv")  # update path if needed
# View the first few rows
head(hd_data, 5)
# --- Step 2: Data cleaning and transformation ---
# Create binary outcome variable (1 = disease, 0 = no disease)
hd_data <- hd_data %>%
mutate(hd = ifelse(class > 0, 1, 0))
# Recode gender from numeric to factor
hd_data <- hd_data %>%
mutate(gender = factor(sex, levels = 0:1, labels = c("Female", "Male")))
# --- Step 3: Statistical Tests ---
# Chi-squared test: gender vs disease
hd_gender <- chisq.test(hd_data$hd, hd_data$gender)
# T-test: age vs disease
hd_age <- t.test(age ~ hd, data = hd_data)
# T-test: thalach (max heart rate) vs disease
hd_heartrate <- t.test(thalach ~ hd, data = hd_data)
# Print test results
print(hd_gender)
print(hd_age)
print(hd_heartrate)
# Label outcome
hd_data <- hd_data %>%
mutate(hd_labelled = ifelse(hd == 0, "No Disease", "Disease"))
# --- Step 4: Visualizations ---
# Boxplot: age vs disease
ggplot(data = hd_data, aes(x = hd_labelled, y = age)) +
geom_boxplot() +
ggtitle("Age vs Heart Disease")
# Barplot: gender vs disease
ggplot(data = hd_data, aes(x = hd_labelled, fill = gender)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Gender Distribution by Heart Disease")
# Boxplot: thalach vs disease
ggplot(data = hd_data, aes(x = hd_labelled, y = thalach)) +
geom_boxplot() +
ggtitle("Max Heart Rate vs Heart Disease")
# --- Step 5: Logistic Regression Model ---
# Fit model
model <- glm(hd ~ age + gender + thalach, data = hd_data, family = "binomial")
# Model summary
print(summary(model))
# Tidy model and compute ORs and CI
tidy_m <- tidy(model)
tidy_m$OR <- exp(tidy_m$estimate)
tidy_m$lower_CI <- exp(tidy_m$estimate - 1.96 * tidy_m$std.error)
tidy_m$upper_CI <- exp(tidy_m$estimate + 1.96 * tidy_m$std.error)
# Print tidy output
print(tidy_m)
# --- Step 6: Predict and Classify ---
# Predicted probabilities
pred_prob <- predict(model, hd_data, type = "response")
# Classification: 0.5 cutoff
hd_data$pred_hd <- ifelse(pred_prob >= 0.5, 1, 0)
# Predict for a new patient
newdata <- data.frame(age = 45, gender = "Female", thalach = 150)
p_new <- predict(model, newdata, type = "response")
print(paste("Predicted probability for new case:", round(p_new, 3)))
# --- Step 7: Model Evaluation ---
# AUC, accuracy, error
auc <- auc(hd_data$hd, hd_data$pred_hd)
accuracy <- accuracy(hd_data$hd, hd_data$pred_hd)
classification_error <- ce(hd_data$hd, hd_data$pred_hd)
# Print performance metrics
print(paste("AUC =", round(auc, 3)))
print(paste("Accuracy =", round(accuracy, 3)))
print(paste("Classification Error =", round(classification_error, 3)))
# Confusion Matrix
print(table(hd_data$hd, hd_data$pred_hd, dnn = c("True Status", "Predicted Status")))
Heartrate <- read.csv("C:/Users/Nelson/Desktop/da project/Heartrate.csv")
View(Heartrate)
# Load necessary packages
library(tidyverse)
library(broom)
library(Metrics)
# --- Step 1: Load the uploaded dataset ---
# Replace with your actual path if needed
Heartrate <- read.csv("C:/Users/Nelson/Desktop/da project/Heartrate.csv") # update path if needed
# View the first few rows
head(Heartrate, 5)
# --- Step 2: Data cleaning and transformation ---
# Create binary outcome variable (1 = disease, 0 = no disease)
Heartrate <- Heartrate %>%
mutate(hd = ifelse(class > 0, 1, 0))
# Recode gender from numeric to factor
Heartrate <- Heartrate %>%
mutate(gender = factor(gender, levels = 0:1, labels = c("Female", "Male")))
# --- Step 3: Statistical Tests ---
# Chi-squared test: gender vs disease
hd_gender <- chisq.test(Heartrate$hd, Heartrate$gender)
# T-test: age vs disease
hd_age <- t.test(age ~ hd, data = Heartrate)
# T-test: thalach (max heart rate) vs disease
hd_heartrate <- t.test(thalach ~ hd, data = Heartrate)
# Print test results
print(hd_gender)
print(hd_age)
print(hd_heartrate)
# Label outcome
Heartrate <- Heartrate %>%
mutate(hd_labelled = ifelse(hd == 0, "No Disease", "Disease"))
# --- Step 4: Visualizations ---
# Boxplot: age vs disease
ggplot(data = Heartrate, aes(x = hd_labelled, y = age)) +
geom_boxplot() +
ggtitle("Age vs Heart Disease")
# Barplot: gender vs disease
ggplot(data = Heartrate, aes(x = hd_labelled, fill = gender)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Gender Distribution by Heart Disease")
# Boxplot: thalach vs disease
ggplot(data = Heartrate, aes(x = hd_labelled, y = thalach)) +
geom_boxplot() +
ggtitle("Max Heart Rate vs Heart Disease")
# --- Step 5: Logistic Regression Model ---
# Fit model
model <- glm(hd ~ age + gender + thalach, data = Heartrate, family = "binomial")
# Model summary
print(summary(model))
# Tidy model and compute ORs and CI
tidy_m <- tidy(model)
tidy_m$OR <- exp(tidy_m$estimate)
tidy_m$lower_CI <- exp(tidy_m$estimate - 1.96 * tidy_m$std.error)
tidy_m$upper_CI <- exp(tidy_m$estimate + 1.96 * tidy_m$std.error)
# Print tidy output
print(tidy_m)
# --- Step 6: Predict and Classify ---
# Predicted probabilities
pred_prob <- predict(model, Heartrate, type = "response")
# Classification: 0.5 cutoff
Heartrate$pred_hd <- ifelse(pred_prob >= 0.5, 1, 0)
# Predict for a new patient
newdata <- data.frame(age = 45, gender = "Female", thalach = 150)
p_new <- predict(model, newdata, type = "response")
print(paste("Predicted probability for new case:", round(p_new, 3)))
# --- Step 7: Model Evaluation ---
# AUC, accuracy, error
auc <- auc(Heartrate$hd, Heartrate$pred_hd)
accuracy <- accuracy(Heartrate$hd, Heartrate$pred_hd)
classification_error <- ce(Heartrate$hd, Heartrate$pred_hd)
# Print performance metrics
print(paste("AUC =", round(auc, 3)))
print(paste("Accuracy =", round(accuracy, 3)))
print(paste("Classification Error =", round(classification_error, 3)))
# Confusion Matrix
print(table(Heartrate$hd, Heartrate$pred_hd, dnn = c("True Status", "Predicted Status")))
# Load necessary packages
library(tidyverse)
library(broom)
library(Metrics)
# --- Step 1: Load the uploaded dataset ---
# Replace with your actual path if needed
Heartrate <- read.csv("C:/Users/Nelson/Desktop/da project/Heartrate.csv") # update path if needed
# View the first few rows
head(Heartrate, 5)
# --- Step 2: Data cleaning and transformation ---
# Create binary outcome variable (1 = disease, 0 = no disease)
Heartrate <- Heartrate %>%
mutate(hd = ifelse(class > 0, 1, 0))
# Recode gender from numeric to factor
Heartrate <- Heartrate %>%
mutate(gender = factor(gender, levels = 0:1, labels = c("Female", "Male")))
# --- Step 3: Statistical Tests ---
# Chi-squared test: gender vs disease
hd_gender <- chisq.test(Heartrate$hd, Heartrate$gender)
# T-test: age vs disease
hd_age <- t.test(age ~ hd, data = Heartrate)
# T-test: thalach (max heart rate) vs disease
hd_heartrate <- t.test(thalach ~ hd, data = Heartrate)
# Print test results
print(hd_gender)
print(hd_age)
print(hd_heartrate)
# Label outcome
Heartrate <- Heartrate %>%
mutate(hd_labelled = ifelse(hd == 0, "No Disease", "Disease"))
# --- Step 4: Visualizations ---
# Boxplot: age vs disease
ggplot(data = Heartrate, aes(x = hd_labelled, y = age)) +
geom_boxplot() +
ggtitle("Age vs Heart Disease")
# Barplot: gender vs disease
ggplot(data = Heartrate, aes(x = hd_labelled, fill = gender)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Gender Distribution by Heart Disease")
# Boxplot: thalach vs disease
ggplot(data = Heartrate, aes(x = hd_labelled, y = thalach)) +
geom_boxplot() +
ggtitle("Max Heart Rate vs Heart Disease")
# --- Step 5: Logistic Regression Model ---
# Fit model
model <- glm(hd ~ age + gender + thalach, data = Heartrate, family = "binomial")
# Model summary
print(summary(model))
# Tidy model and compute ORs and CI
tidy_m <- tidy(model)
tidy_m$OR <- exp(tidy_m$estimate)
tidy_m$lower_CI <- exp(tidy_m$estimate - 1.96 * tidy_m$std.error)
tidy_m$upper_CI <- exp(tidy_m$estimate + 1.96 * tidy_m$std.error)
# Print tidy output
print(tidy_m)
# --- Step 6: Predict and Classify ---
# Predicted probabilities
pred_prob <- predict(model, Heartrate, type = "response")
# Classification: 0.5 cutoff
Heartrate$pred_hd <- ifelse(pred_prob >= 0.5, 1, 0)
# Predict for a new patient
newdata <- data.frame(age = 45, gender = "Female", thalach = 150)
p_new <- predict(model, newdata, type = "response")
print(paste("Predicted probability for new case:", round(p_new, 3)))
# --- Step 7: Model Evaluation ---
# AUC, accuracy, error
auc <- auc(Heartrate$hd, Heartrate$pred_hd)
accuracy <- accuracy(Heartrate$hd, Heartrate$pred_hd)
classification_error <- ce(Heartrate$hd, Heartrate$pred_hd)
# Print performance metrics
print(paste("AUC =", round(auc, 3)))
print(paste("Accuracy =", round(accuracy, 3)))
print(paste("Classification Error =", round(classification_error, 3)))
# Confusion Matrix
print(table(Heartrate$hd, Heartrate$pred_hd, dnn = c("True Status", "Predicted Status")))
# Load necessary libraries
library(tidyverse)
library(broom)
library(Metrics)
# 1. Load the dataset
Heartrate <- read.csv("C:/Users/Nelson/Desktop/da project/Heartrate.csv", stringsAsFactors = FALSE)
# 2. Basic cleaning - replace "?" with NA and remove rows with NA
Heartrate[Heartrate == "?"] <- NA
Heartrate <- Heartrate %>%
mutate(
age = as.numeric(age),
thalach = as.numeric(thalach),
gender = as.numeric(gender),
class = as.numeric(class)
)
Heartrate <- na.omit(Heartrate)
# 3. Remove duplicate rows
Heartrate <- Heartrate %>% distinct()
# 4. Outlier detection and removal using IQR method for numeric variables
remove_outliers <- function(df, column) {
Q1 <- quantile(df[[column]], 0.25)
Q3 <- quantile(df[[column]], 0.75)
IQR <- Q3 - Q1
df %>% filter(df[[column]] >= (Q1 - 1.5 * IQR) & df[[column]] <= (Q3 + 1.5 * IQR))
}
Heartrate <- remove_outliers(Heartrate, "age")
Heartrate <- remove_outliers(Heartrate, "thalach")
# 5. Recode target variable and gender
Heartrate <- Heartrate %>%
mutate(
hd = ifelse(class > 0, 1, 0),
gender = factor(gender, levels = c(0, 1), labels = c("Female", "Male")),
hd_labelled = factor(ifelse(hd == 1, "Disease", "No Disease"))
)
# 6. Statistical tests
hd_gender <- chisq.test(table(Heartrate$hd, Heartrate$gender))
hd_age <- t.test(age ~ hd, data = Heartrate)
hd_thalach <- t.test(thalach ~ hd, data = Heartrate)
print(hd_gender)
print(hd_age)
print(hd_thalach)
# 7. Visualizations
ggplot(Heartrate, aes(x = hd_labelled, y = age)) +
geom_boxplot() +
ggtitle("Age vs Heart Disease")
ggplot(Heartrate, aes(x = hd_labelled, fill = gender)) +
geom_bar(position = "fill") +
ylab("Proportion") +
ggtitle("Gender vs Heart Disease")
ggplot(Heartrate, aes(x = hd_labelled, y = thalach)) +
geom_boxplot() +
ggtitle("Max Heart Rate vs Heart Disease")
# 8. Logistic regression model
model <- glm(hd ~ age + gender + thalach, data = Heartrate, family = "binomial")
summary(model)
# 9. Odds ratios with 95% confidence intervals
tidy_model <- tidy(model) %>%
mutate(
OR = exp(estimate),
lower_CI = exp(estimate - 1.96 * std.error),
upper_CI = exp(estimate + 1.96 * std.error)
)
print(tidy_model)
# 10. Predict probabilities and decisions
Heartrate$pred_prob <- predict(model, newdata = Heartrate, type = "response")
Heartrate$pred_hd <- ifelse(Heartrate$pred_prob >= 0.5, 1, 0)
# 11. Prediction for a new individual
new_patient <- data.frame(age = 45, gender = "Female", thalach = 150)
pred_new <- predict(model, new_patient, type = "response")
print(paste("Predicted probability for new patient:", round(pred_new, 3)))
# 12. Model evaluation
model_auc <- auc(Heartrate$hd, Heartrate$pred_prob)
model_accuracy <- accuracy(Heartrate$hd, Heartrate$pred_hd)
model_ce <- ce(Heartrate$hd, Heartrate$pred_hd)
print(paste("AUC:", round(model_auc, 3)))
print(paste("Accuracy:", round(model_accuracy, 3)))
print(paste("Classification Error:", round(model_ce, 3)))
# 13. Confusion matrix
conf_matrix <- table(True = Heartrate$hd, Predicted = Heartrate$pred_hd)
print(conf_matrix)
